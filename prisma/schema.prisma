// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// This file is the entry point for your Prisma setup. It defines your database schema
// and is used by Prisma Migrate to manage your database schema over time.

// 1. Define your database connection URL in the.env file:
// DATABASE_URL="postgresql://user:password@localhost:5432/mydb"

// 2. Define your database schema in this file. For example:
// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

// 3. Define your data model. For example, to create a User model:
// model User {
//   id    Int     @id @default(autoincrement())
//   name  String
//   email String  @unique
// }

// 4. Run `npx prisma migrate dev --name init` to initialize Prisma Migrate and create
//    the initial migration. This command also applies the migration to your database.

// 5. Generate the Prisma Client by running `npx prisma generate`. The Prisma Client
//    provides type-safe database access and is generated based on your data model.

// 6. Use the Prisma Client in your application to perform database operations in a
//    type-safe manner. For example, to fetch all users:
//     const users = await prisma.user.findMany();

// 7. To apply migrations in production or environments where you don't want to
//    generate the Prisma Client, use `npx prisma migrate deploy`.

// 8. To rollback the last migration, use `npx prisma migrate rollback`.

// For more detailed information and advanced usage, refer to the Prisma documentation:
// https://www.prisma.io/docs/concepts/components/prisma-migrate


generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String     @id @default(uuid())
  name                  String
  email                 String?    @unique
  emailVerified         DateTime?   @map("email_verified")
  image                 String?
  createdAt             DateTime   @default(now())
  updatedAt             DateTime   @updatedAt
  accounts              Account[]
  sessions              Session[]
  @@map("users")
}

model Account {
  id                 String    @id @default(cuid())
  userId              String    @map("user_id")
  type                 String?
  provider           String
  providerAccountId  String    @map("provider_account_id")
  token_type         String?
  refresh_token      String?   @db.Text
  access_token       String?   @db.Text
  expires_at         Int?
  scope              String?
  id_token           String? @db.Text
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  userId       String?  @map("user_id")
  sessionToken String   @map("session_token") @unique
  accessToken  String?  @db.Text @map("access_token")
  expires      DateTime
  user         User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("sessions")
}

model VerificationRequest {
  id         String   @id @default(cuid())
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}